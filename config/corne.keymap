/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define LYR_DEFAULT 0
#define LYR_LOWER 1
#define LYR_UPPER 2
#define LYR_SYMBOL 3
#define LYR_SYSTEM 4

&caps_word {
    continue-list = <UNDERSCORE MINUS BACKSPACE DELETE>;
};

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        system_layer {
            if-layers = <LYR_LOWER LYR_UPPER>;
            then-layer = <LYR_SYSTEM>;
        };
    };

    macros {
        m_next: m_next {
            label = "M_NEXT";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp RC(TAB)>,
                <&macro_release>,
                <&kp RC(TAB)>;
        };
        m_prev: m_prev {
            label = "M_PREV";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LC(LS(TAB))>,
                <&macro_release>,
                <&kp LC(LS(TAB))>;
        };
    };

    behaviors {
        gqt: global-quick-tap {
            compatible = "zmk,behavior-hold-tap";
            label = "GLOBAL_QUICK_TAP";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <350>;
            quick-tap-ms = <200>;
            global-quick-tap;
            bindings =
                <&kp>,
                <&kp>;
        };
        gqtr: global-quick-tap-retro {
            compatible = "zmk,behavior-hold-tap";
            label = "GLOBAL_QUICK_TAP";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <350>;
            quick-tap-ms = <200>;
            global-quick-tap;
            retro-tap;
            bindings =
                <&kp>,
                <&kp>;
        };
        mtq: mod-tap-quick {
            compatible = "zmk,behavior-hold-tap";
            label = "MOD_TAP_QUICK";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <350>;
            quick-tap-ms = <200>;
            bindings =
                <&kp>,
                <&kp>;

            retro-tap;
        };
        left_mods: left-mods {
            compatible = "zmk,behavior-tap-dance";
            label = "LEFT_MODS";
            #binding-cells = <0>;
            tapping-term-ms = <350>;
            bindings =
                <&kp LGUI>,
                <&kp LCTRL>,
                <&kp LALT>;
        };
        right_mods: right-mods {
            compatible = "zmk,behavior-tap-dance";
            label = "RIGHT_MODS";
            #binding-cells = <0>;
            tapping-term-ms = <350>;
            bindings =
                <&kp RGUI>,
                <&kp RCTRL>,
                <&kp RALT>;
        };
        dn_lyr_tap: dn-lyr-tap {
            compatible = "zmk,behavior-tap-dance";
            label = "DN_LYR_TAP";
            #binding-cells = <0>;
            tapping-term-ms = <350>;
            bindings =
                <&mo 1>,
                <&mo 3>;
        };
        up_lyr_tap: up-lyr-tap {
            compatible = "zmk,behavior-tap-dance";
            label = "UP_LYR_TAP";
            #binding-cells = <0>;
            tapping-term-ms = <350>;
            bindings =
                <&mo 2>,
                <&mo 3>;
        };
        shift_caps: shift-caps {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_CAPS";
            #binding-cells = <0>;
            bindings =
                <&kp LSHIFT>,
                <&caps_word>;

            tapping-term-ms = <350>;
        };
    };

    combos {
        compatible = "zmk,combos";

        underscore {
            bindings = <&kp UNDER>;
            key-positions = <38 39>;
        };

        nav_prev {
            bindings = <&m_prev>;
            key-positions = <19 41>;
        };

        nav_next {
            bindings = <&m_next>;
            key-positions = <20 41>;
        };

        vol_down {
            bindings = <&kp C_VOL_DN>;
            key-positions = <15 36>;
        };

        vol_up {
            bindings = <&kp C_VOL_UP>;
            key-positions = <16 36>;
        };

        play_pause {
            bindings = <&kp C_PLAY_PAUSE>;
            key-positions = <13 36>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
    &kp TAB  &kp Q  &kp W       &kp E        &kp R          &kp T      &kp Y        &kp U        &kp I    &kp O     &kp P    &kp BACKSLASH
    &kp ESC  &kp A  &kp S       &kp D        &kp F          &kp G      &kp H        &kp J        &kp K    &kp L  &kp SEMI         &kp APOS
&shift_caps  &kp Z  &kp X       &kp C        &kp V          &kp B      &kp N        &kp M    &kp COMMA  &kp DOT  &kp FSLH  &mtq RSHIFT RET
                           &left_mods  &dn_lyr_tap  &kp BACKSPACE  &kp SPACE  &up_lyr_tap  &right_mods
            >;
        };

        lower_layer {
            bindings = <
&kp GRAVE  &kp N1  &kp N2  &kp N3  &kp N4      &kp N5  &kp N6            &kp N7             &kp N8     &kp N9                 &kp N0  &trans
   &trans  &trans  &trans  &trans  &trans      &trans  &trans  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp MINUS              &kp EQUAL  &trans
   &trans  &trans  &trans  &trans  &trans      &trans  &trans    &kp LEFT_BRACE    &kp RIGHT_BRACE   &kp LPAR  &kp RIGHT_PARENTHESIS  &trans
                           &trans  &trans  &kp DELETE  &trans            &trans             &trans
            >;
        };

        upper_layer {
            bindings = <
&kp GRAVE  &kp N1  &kp N2  &kp N3  &kp N4      &kp N5    &kp N6    &kp N7  &kp N8     &kp N9  &kp N0  &trans
   &trans  &trans  &trans  &trans  &trans      &trans  &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans  &trans
   &trans  &trans  &trans  &trans  &trans      &trans    &trans    &trans  &trans     &trans  &trans  &trans
                           &trans  &trans  &kp DELETE    &trans    &trans  &trans
            >;
        };

        symbol_layer {
            bindings = <
&kp TILDE  &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT  &kp CARET  &kp AMPS  &kp STAR  &kp LPAR  &kp RPAR  &trans
   &trans    &trans  &trans    &trans    &trans     &trans     &trans    &trans    &trans    &trans    &trans  &trans
   &trans    &trans  &trans    &trans    &trans     &trans     &trans    &trans    &trans    &trans    &trans  &trans
                               &trans    &trans     &trans     &trans    &trans    &trans
            >;
        };

        system_layer {
            bindings = <
&trans        &kp F1        &kp F2        &kp F3        &kp F4        &kp F5   &kp F6   &kp F7   &kp F8   &kp F9  &kp F10      &trans
&trans       &kp F11       &kp F12       &kp F13       &kp F14       &kp F15  &kp F16  &kp F17  &kp F18  &kp F19  &kp F20      &trans
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4   &trans   &trans   &trans   &trans   &trans  &bt BT_CLR
                                          &trans        &trans        &trans   &trans   &trans   &trans
            >;
        };
    };
};
